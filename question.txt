components
helpers
pages
routers
states
styles
JAVASCRIPT
1/ Phân biệt let, var, const
- Đều dung để khai báo biến
    - Let
        - Các biến được khai báo là let sẽ có scope là block scope
        - Cho phép chúng ta cập nhật lại giá trị của biến chứ không cho phép tái khái bái lại biến đó
            - let greeting = "say Hi";
            - let greeting = "say Hello instead"; // error: Identifier 'greeting' has already been declared
        - Đối với các block khác nhau thì việc tái khai báo sẽ không gây ra lỗi
    - Var
        - Các biến được khai báo là var thì sẽ có scope là function-scoped  hoặc global-scoped (See ex2)
            Nếu có code block bên trong một function thì vả trở thành function-level variable:
            function sayHi() {
              if (true) {
                var phrase = "Hello";
              }
              alert(phrase); // works
            }
            sayHi();
            alert(phrase); // ReferenceError: phrase is not defined

        - Cho phép khai báo lại biến đó
        - Các biến var có thể được khai báo dưới việc sử dụng chúng (Người ta gọi đó là hoisting, 
          bởi vi các biến được khai báo là vả được raised lên đầu của function)
            - Declarations thì được hoisted, nhưng assignment thì không
    - Const
        - Để khai báo 1 hắng số
        - Không thể cập nhật giá trị

2/ Con trỏ this
- Giá trị của this là một object trước dấu .
- Khi gọi mà không có đối tượng thì thís == undefined (See ex3)
  function sayHi() {
    alert(this);
  }
  sayHi(); // undefined

- Arrow function không có this
    - Nếu chúng ta tham chiếu thí trong arrow function, nó sẽ được lấy từ outer function

3/ Functions
- Function declaration: function say(name) {}
- Function expression: const say = function say() {}
- Lexical environment bao gồm 2 phần: Environment Record and outer lexical environment
- Closure
    - Tất cả function trong javascript đều là closure
    - Tất cả function đều ghi nhớ các outer variables của nó và có thể truy cập nó.
    - Tất cả các function có thuộc tính ẩn là Environment

4/ Phân biệt pure function và impure function
- Pure function phải thoả mãn 2 điều kiện
    - Các input giống nhau luôn trả ra output giống nhau
    - Không có side effects:
        - Modifying an argument
        - Modifying a global variable
        - Making HTTP request

5/ Data Type
  - Primitive, Null , Undefined, boolean, Number, string, symbol
  - Reference: Kế thừa từ object 
    - Date, Set, Map, Function, Array
    - Map: là 1 collection có key và value, khác với object, Map cho phép key là any type
      - method: (new Map(), map.set(key, value), map.get(key), 
        map.has(key), map.delete(key), map.clear(), map.size)
      - iteration:
        vd: let vegetable of recipeMap.keys(), let amount of recipeMap.values(), let entry of recipeMap
    - weakMap: giống Map, nhưng key của nó phải là object, no primitive values
      - Không support iteration

    - Set: là tập hợp value (không có key), trong đó mỗi giá trị chỉ xuất hiện 1 lần
      - method: new Set(iterable), set.add(value), set.delete(value), 
        set.has(value), set.clear(), set.size()
      - iteration: 
        vd: for (let value of set)
    - weakSet: giống Set, nhưng key của nó phải là object, no primitive values
      - Không support iteration

6/ Microtasks: promises
   Macrotasks: setTimeOut
    + Microtasks chạy trước Macrotasks

7/ Iterable: Là một object được implement Symbol.iterator method
  - string, array là 1 iterable
  - Example:
    let range = {
      from: 1,
      to: 5
    };
    // 1. call to for..of initially calls this
    range[Symbol.iterator] = function() {
      // ...it returns the iterator object:
      // 2. Onward, for..of works only with this iterator, asking it for next values
      return {
        current: this.from,
        last: this.to,
        // 3. next() is called on each iteration by the for..of loop
        next() {
          // 4. it should return the value as an object {done:.., value :...}
          if (this.current <= this.last) {
            return { done: false, value: this.current++ };
          } else {
            return { done: true };
          }
        }
      };
    };

8/ Generator function: 
- Function*
  Khi nó đc gọi, nó không thục thi code, thay vào đó nó return 1 object, để quản lý execution
  method là generator object

9/ Currying function
- Thay vì function truyển 1 lúc nhiều argument, chúng lại được chuyển kiểu viết đó thành 1 function 
chỉ nhận 1 argument, nhưng bên trong đó chúng ta lồng các function con bên trong
  function multiply(a) {
    return b => {
      return c => {
        return a * b * c
      }
    }
  }
  multiply(1)(2)(3)

REACT
1/ HOC
- A Hoc là 1 function mà nó nhận vào 1 component và returns 1 component mới
- Sử dụng HOC cho Cross-cutting concerns(Những logic phụ cần  được thực hiện khi logic chính được gọi)

2/ Error Boundaries
- Là 1 react component mà nó catch javascript error trong cây thành phần con của nó, 
  log error đó và display 1 fallbackUI thay vì component tree sẽ bị crashed
- Error Boundaries catch error trong quá trình render, in lifecycle and in constructor
      static getDerivedStateFromError() or componentDidCatch()

3/ Hook là gì ?
- Là những hàm cho phép bạn “kết nối” React state and lifecycle vào các function component
- Lợi ích: 
    - Code ngắn hơn
    - Hoàn toàn tự nguyện, 100% tương thích ngược

4/ Function component và class component
- Khác nhau lớn nhất giữa function component và class component là
    - Function component capture các giá trị đã render

5/ UseRef
- Là một hook dùng để access đến DOM element hoặc 1 instance của component

6/ Render Props
- Share code giữa các component sử dụng 1 prop có value là một function

7/ Server side rendering và client side rendering
- Server side rendering
  + Nội dung HTML được server xử lý và trả về cho browser, tuy nhiên lúc này web
  mới chỉ thấy nội dung, chưa thể tương tác được. Trình duyệt vẫn tiếp tục tải JS về
- Client side rendering
  + Trong csr, thì gánh nặng biên dịch nội dung và tạo html được chuyển sang client

- Compare ssr vs csr
  - Web page load time
    - First page load time: 
      + CSR: browser load html, css, và js một lần sau đó compile HTML có thể sử dụng trên trình duyệt
      + SSR: SSR mất ít thời gian hơn bình thường khi lần đầu tiên tải
    - Second and further page load time: thời gian tải trang lần 2 là thời gian chuyển từ page này 
      sang page khác
      + CSR: Do tất cả js được tải lên trước cho client, thời gian tải sẽ ít hơn 
      + SCR: Chu kỳ tải trang đầu tiên được lặp lại. Do đó thời gian tải sẽ mất thời gian hơn csr

8/ Phân biệt angular với reactjs
  Có nhiều yếu tố để so sánh lắm: m nói theo kinh nghiệm thôi. VD: về angular tiện cho mới học, 
  vì framework hoàn chỉnh, chỉ đọc document & dùng tính năng. 
  React thì học nhiều thứ, vì react thì flexible, cho tích hợp nhiều thứ- thư viện bên thứ 3.

  Ưu điểm react: flexible, key là react native vì làm mobile, dễ dàng chuyển sang mobile nhanh. RN cross platform phổ biến.
  Nhược điểm: khó vs người mới học

  Angular: tích hợp sẵn TS. React thuận JS, vẫn có template để xài TS

  Tốc độ render thì thao tác DOM vs HTML => đọc benchmarch trên mạng thì angular tốt hơn.
  Về lưu trữ bộ nhớ thì React tốt hơn
  => Tốc độ 2 thằng same same

  Cộng đồng : react nhiều hơn, có react native, 
  k bị breaking change như angular ( angularJS, Angular 2,4,7,8, ...) phải học lại

  Cả 2 điều có đẩy đủ: binding, quản lý bộ nhớ, routing seem nhau

  Vì xu hướng là mobile first => react native phổ biến hơn angular có ionic. 
  Cân nhắc tuỳ theo dự án cần mobile app hay ko ? tối ưu thời gian hay ko

9. Redux
  - Store: là nơi lưu trử data của ứng dụng, nó làm 1 số việc sau đây
    + Lưu trữ state
    + Cung cấp quyền truy cập vào state
    + Cập nhật state
    + Khi có 1 sự kiện thay đổi state, những bên này có thể được thông báo về sự thay đổi
  - Action là 1 simple javascript object mà nó được sử dụng để gửi thông tin từ application của bạn
  xuống store. Actions là resourse duy nhất cho store.
    + Action phải có type property
  - Reducers(pure function): là những action handler, nó hoạt động kết nối giữa action và store và
    biến những thay đổi trong state.
    + Reducer nhận vào previous state và action object và return next state
  

  - Core concept redux:
    + Redux là 1 vùng chứa state cho app (mỗi app chỉ có 1 store duy nhất)
    + Redux thì không cần được sử dụng với React
    + State là read-only. Nó chỉ được thay đổi bằng việc dispacthing 1 action đến store
    + Để mô tả các thay đổi của state bạn phải viết 1 function nhận vào current state và action 
    để thực hiện. Các function này phải trả về 1 state mới.

10/ lifecycle của React
- Mounting
  - constructor: dùng cho khởi tạo state, và binding method
    + Được gọi trước khi mounted
  - render: chỉ require trong class component, nó return 
  - getDerivedStateFromProps: nó được gọi trước render(initial moun và bản cập nhật tiếp theo)
  - componentDidMount: được thự thi ngay lập tức sau khi component mounted
    + load data(call api)
    + set up any subscriptions
- Updating
  - shouldComponentUpdate: được thực thi trước khi rendering khi new props hoặc new state
    đang được nhận
    + Method này không được gọi cho initial render hoặc khi forceUpdate được sử dụng
    + Phương thức tồn tại cho 1 tối ưu hoá hiệu xuất
    + Default là true nếu nó return false thì render(), componentDidUpdate() sẽ không được gọi
    shouldComponentUpdate(nextProps, nextState)
  - componentDidUpdate: được gọi sau khi cập nhật xảy ra 
    + method này không được gọi cho lần init render
    + Có thể call api, hay setState trong này, nhưng phải wraper với điều kiện
    componentDidUpdate(prevProps) {
      // Typical usage (don't forget to compare props):
      if (this.props.userID !== prevProps.userID) {
        this.fetchData(this.props.userID);
      }
    }
- Unmounting
  - componentWillUnmount: được thực thi ngay lập tức trước khi component bị unmouted và destroyed
    + cleaning up any subscriptions
    + invalidating timers,

12/ Props are inputs to components
  + Trigger state changes.

13/ JWT: chuỗi mã hóa chứa dữ liệu được dùng để truyền tải thông tin giữa hệ thống 1 cách an toàn và đáng tin cậy
  - Cấu trúc JWT gồm 3 phần: HEADER, PAYLOAD, SIGNATURE 
    - HEADER: chứa thuật toán(hs256) để tạo SIGNATURE
    - SIGNATURE: 
      hs256(
        bao gồm header và payload được encode,
        1 secret key
      )

REDUX SAGA
  - Là 1 middleware giúp xử lý side-effect
  - Saga là những generator function, saga sẽ được middleware đoc và thực thi những câu lệnh từ trên xuống dưới
  Khi gặp yield, redux-saga middleware sẽ nhận đc effect đó và thực thi hành động tương ứng
  - Effect: là 1 javascript object dùng để mô tả các tác vụ đến redux-saga 
  - Effect creator là những factory function cung cấp bởi redux-saga và hàm này sẽ trã về 1 effect

    - Blocking: take, call (block nếu như function return về promise), 
    - Non Blocking: put, fork, takeLastest, takeEvery
    - Watcher và worker: đây là 1 cách tổ chức code
      + Watcher: là 1 saga theo dõi tất cả action đến middleware và sẽ thông báo cho Worker thực hiện tác
      vụ tương ứng
      + Workder: là 1 saga sẽ thực thi các hành động bên trong nó khi nhận thông báo từ Watcher


CSS
CSS Flexbox
  - Order:
    + Cho phép đổi vị trí hiển thị của phần tử
  
  - Justify: flex-start, flex-end, center
    + space-between: Tạo khoảng cách giữa các phần tử bằng nhau, phần tử đầu sát lề trái, phần tử cuối sát lề phải
    + space-around: khá giống space-around, có khoảng cách 2 bên giữa các phần tử và những khoảng cách này bằng nhau
  
  - AlignItem: flex-start, flex-end, center,stretch(default),
    + stretch: nếu các item bên trong có height: auto thì nó sẽ full container
    + baseline: nó sẽ canh phần tử dựa vào chữ bên trong
  
  - Alignself(của flex item): tương tự với AlignItem những khác ở chỗ là áp dụng riêng lẻ cho các phần tử 
    mà bạn muốn thay đổi 
  giá trị của nó

  - Flex basis(của flex item): set chiều rộng hoặc chiều cao của phần tử dựa vào flex-direction row hay column, 
    + Default là  flex-direction: row => flex-basis tương tương đương width của phần tử,
    + Khi flex-direction: column thì lúc này flex-basis sẽ là height của phần tử
  
  - Flex grow(của flex item): nó cho các phần tử giãn theo độ rộng của container
  
  - Flex-shrink(của flex item): nó cho các phần tử co lại khi giảm container
    + flex-shrink: 1, item sẽ co lại khi giảm container
    + flex-shrink: 0, item sẽ không có lại

  - Flex: là viết tắt của 3 thuộc tính flex-grow, flex-shrink, flex-basis
    + default (flex: 0 1 auto): grow(0), shrink(1), basis(auto)
CSS Grid
  - Grid track: Các đường đánh dấu theo thứ tự theo các cột hàng hàng
  - grid-template-columns: container sẽ chia cột cho các phần tử bên trong nó
    .container {
      grid-template-columns: 1fr 2fr 1fr 1fr 3fr;
      grid-template-columns: 500px 200px;
    }
    + fraction-unit(fr): đây là 1 giá trị mới dùng cho css grid, giá trị này sẽ chiếm khoảng trống lớn nhất
    có thể
      vd: grid-template-columns: 1fr 2fr 1fr
        Layout chia làm 3 cột, 2fr sẽ gấp đôi 2 côt còn lại, nghĩa là container 100% sẽ chia cho 4 cột,
        và cột đầu tiên và cột cuối cùng sẽ chiếm 25% còn 50% là cột ở giữa
  - grid-template-columns: thuộc tính này là chia hàng(rows)
      vd: grid-template-rows: 100px 150px 50px;

  - grid implicit và explicit tracks
  - grid-auto-flow: khi có 1 phần tử bị rớt ra, thì thuộc tính này giúp set cho các phần tử đó
      vd: 
        grid-auto-flow: row
        grid-auto-rows: 100px
        grid-auto-flow: column
        grid-auto-column: 100px
  - grid-gap: tạo khoảng cách giữa các phần tử với nhau theo cột và theo hàng
    - grid-gap: grid-row-gap grid-column-gap.

  - Repeat(hàm): tạo nhiều cột và hàng 1 cách nhanh chóng
    vd: grid-template-columns: 10% repeat(4,20%) 10%
  
  - grid-column: Giúp thiết lập vị trí và kích thước của các phần tử theo cột,
    nó là viết tắt của grid-column-start và grid-column-end
    + Cú pháp: grid-column: grid-column-start / grid-column-end
      vd: grid-column: span 2 / 7: nó sẽ chiếm 2 cột bắt đầu từ cột số 7
      vd: grid-column: 5 / span 2: nó sẽ chiếm 2 cột bắt đầu từ cột số 5
  - grid-row: Giúp chúng ta thiết lập vị trí và kích thước của phần tử theo hàng
    nó là viết tắt của grid-row-start và grid-row-end

  - grid-template-areas: giúp tạo layout nhanh và dễ dàng
    vd: grid-template-areas: "head head"
                              "nav  main"
                              "nav  foot";
        grid-template-rows: 50px 1fr 30px;
        grid-template-columns: 150px 1fr;

Box-sizing:
  + content-box: các element có default là content-box. 
    Thuộc tính width và height để định nghĩa chiều rộng / cao của content
  + border-box: chiều rộng element width = width content + padding (trái , phải) + border (trái, phải)

rem và em 
  - rem: là đơn vị tham chiếu tỷ lệ so với phần tử gốc của website 
  ở đây là thẻ <html> dựa vào giá trị của thuộc tính font-size
  - em: là đơn vị tham chiếu tỷ lệ so với phần tử cha trực tiếp chứa nó hoặc 
  chính nó dựa vào giá trị của thuộc tính là font-size


CHALLENGE
1/ Cho một mảng, khi bỏ 1 phần tử trong mảng thì mảng vẫn đảm bảo tăng dần
Ex: arr = [1,5,4,7,8]
2/ Viêt hàm compare tuổi
A {age: 18, name: 'A'} . B {name: 'A', age: 18}
3/ Arr = [2, 3, 4, 5]
  Cho cái mảng. 
  - Tính sô lần tăng cho đến khi giá trị mảng bằng nhau
  - Mỗi lần tăng lên 1 đơn vị phải giữ lại 1 giá trị không tăng
  VD:
  Arr[3]: [3, 4, 5, 5] result = 1
  Arr[2]: [4, 5, 5, 6] result = 2
  Arr[3]: [5, 6, 6, 6] result = 3
  Arr[1]: [6, 6, 7, 7] result = 4
  Arr[3]: [7, 7, 8, 7] result = 5
  Arr[2]: [8, 8, 8, 8] result = 6
  Result 6
4/ arr = [2, 3, 4, 8, 10, 5, 6];
- Ví dụ mỗi phần tử là doanh thu từng tháng theo thứ tự (tháng 1 => tháng 12), tính chệch lệch doanh thu lơn nhất giữa 2 tháng
EX: arr = [2, 3, 4, 8, 10, 5, 6]; => result = 8 - 4 = 4;
Ex: arr = [5, 4, 4, 2, 2]; => result = -1; (Không có tháng nào)

1/ Các bước để setup ssr reactjs
- server.js (nodejs)
  Nó nhận nhiệm vụ nhận request từ phía client.
- Tạo các component và entry point
  + HTML.jsx dùng để render nội dung HTML gửi đến client

